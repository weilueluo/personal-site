#!/usr/bin/env bash
# This script was generated by bashly 1.0.5 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  inspect_args

  set -eo pipefail

  # show aws profile for debug purpose
  aws iam get-user --output json

  echo "Building V3 image..."

  do_build=0
  TAG="${args[tag]}"

  # use auto increment tag if not specified
  if [ -z "${TAG}" ]; then
      echo "No tag specified"
      TAG=$(<$V3_NEXT_TAG_FILE)
      echo "Setting TAG=$TAG"
      NEXT_V3_TAG="$(($TAG + 1))"
      echo "$NEXT_V3_TAG" >"$V3_NEXT_TAG_FILE"
      echo "Setting NEXT_TAG=$NEXT_V3_TAG"
      do_build=1
  else
      echo "Tag specified"
      echo "TAG=$TAG"
  fi

  # force build if --force is specified
  if [ "${args[--force]}" = "1" ]; then
      echo "Using --force"
      do_build=1
  else
      echo "Not using --force"
  fi

  # build if do_build is 1
  if [ $do_build = 1 ]; then
      echo "Building V3 image tag=$TAG ..."
      cd "$V3_ROOT"
      chmod +x build.sh
      ./build.sh "$TAG"

  else
      echo "Not building as tag is specified and --force not used, assumed image to be already built."
  fi

  echo "Provisioning infrastructure..."

  cd "$INFRA_ROOT"
  terraform init
  terraform apply -auto-approve -var "image=public.ecr.aws/d0l7r8j1/personal-website-v3:$TAG"

  V1_BUCKET_NAME=$(terraform output -json v1 | jq -r .bucket_name)
  V2_BUCKET_NAME=$(terraform output -json v2 | jq -r .bucket_name)

  echo "Updating V1 site bucket..."

  if [ -d "$V1_OUTPUT_ROOT" ]; then
      echo "V1 site output found at \"$V1_OUTPUT_ROOT\", reusing existing build."
      # aws s3 sync . "s3://$(terraform output -raw s3_bucket_name)/" --delete
  else
      echo "V1 site output not found at \"$V1_OUTPUT_ROOT\", rebuilding..."
      cd "$V1_ROOT"
      chmod +x build.sh
      ./build.sh
  fi

  aws s3 sync "$V1_OUTPUT_ROOT" "s3://$V1_BUCKET_NAME/" --delete

  echo "Updating V2 site bucket..."

  if [ -d "$V2_OUTPUT_ROOT" ]; then
      echo "V2 site output found at \"$V2_OUTPUT_ROOT\", reusing existing build."
  else
      echo "V2 site output not found at \"$V2_OUTPUT_ROOT\", rebuilding..."
      cd "$V2_ROOT"
      chmod +x build.sh
      ./build.sh
  fi

  aws s3 sync "$V2_OUTPUT_ROOT" "s3://$V2_BUCKET_NAME/" --delete

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
deploy_usage() {
  if [[ -n $long_usage ]]; then
    printf "deploy - Personal Website Deployment\n"
    echo

  else
    printf "deploy - Personal Website Deployment\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  deploy [TAG] [OPTIONS]\n"
  printf "  deploy --help | -h\n"
  printf "  deploy --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--force, -f"
    printf "    force build v3 site image, even if tag is specify\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "TAG"
    printf "    existing tag to build deploy v3 site image\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cli deploy\n"
    printf "  cli deploy 1.0.0\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/check_command.sh
check_command() {
    if ! type "$1" > /dev/null; then
        echo_error "$1 not found"
        exit 1
    fi
}

# src/lib/echo_error.sh
echo_error() { echo "$@" 1>&2; }

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        deploy_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --force | -f)

        # :flag.case_no_arg
        args['--force']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['tag']+x} ]]; then

          args['tag']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

  check_command aws
  check_command terraform
  check_command jq

  # set project root
  PROJECT_ROOT=$(
      cd "$(dirname "$0")/.."
      pwd
  )

  # set infra root
  INFRA_ROOT="$PROJECT_ROOT/infra"

  # set v1 root
  V1_ROOT="$PROJECT_ROOT/v1"
  V1_OUTPUT_ROOT="$V1_ROOT/src/public"

  # set v2 root
  V2_ROOT="$PROJECT_ROOT/v2"
  V2_OUTPUT_ROOT="$V2_ROOT/out"

  # set v3 root
  V3_ROOT="$PROJECT_ROOT/v3"
  V3_NEXT_TAG_FILE="$PROJECT_ROOT/deploy/V3_NEXT_TAG.txt"

  # avoid aws cli pager which launch less/vi
  export AWS_PAGER=""
}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

initialize
run "$@"
